{
	"name": "ETL Generic Copy CSV",
	"properties": {
		"activities": [
			{
				"name": "Find CSV Delimiter",
				"type": "ExecuteDataFlow",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "findCSVDelimiter",
						"type": "DataFlowReference",
						"parameters": {
							"fileName": {
								"value": "'@{pipeline().parameters.Filename}'",
								"type": "Expression"
							}
						},
						"datasetParameters": {
							"source1": {
								"FileName": {
									"value": "@string(pipeline().parameters.Filename)",
									"type": "Expression"
								},
								"KVSasUrl": {
									"value": "@json(pipeline().parameters.cfg).storageaccount.sas_url_kv_name",
									"type": "Expression"
								}
							},
							"sink1": {
								"FileName": {
									"value": "@string(concat('delimiter_', pipeline().parameters.Filename))",
									"type": "Expression"
								},
								"KVSasUrl": {
									"value": "@json(pipeline().parameters.cfg).storageaccount.sas_url_kv_name",
									"type": "Expression"
								}
							}
						}
					},
					"compute": {
						"coreCount": 8,
						"computeType": "General"
					},
					"traceLevel": "Fine"
				}
			},
			{
				"name": "Find CSV Skip Count",
				"type": "ExecuteDataFlow",
				"dependsOn": [
					{
						"activity": "Find CSV Delimiter",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "findCSVHeaders",
						"type": "DataFlowReference",
						"parameters": {
							"fileName": {
								"value": "'@{pipeline().parameters.Filename}'",
								"type": "Expression"
							}
						},
						"datasetParameters": {
							"source1": {
								"FileName": {
									"value": "@string(pipeline().parameters.Filename)",
									"type": "Expression"
								},
								"KVSasUrl": {
									"value": "@json(pipeline().parameters.cfg).storageaccount.sas_url_kv_name",
									"type": "Expression"
								}
							},
							"sink1": {
								"FileName": {
									"value": "@string(concat('headers_', pipeline().parameters.Filename))",
									"type": "Expression"
								},
								"KVSasUrl": {
									"value": "@json(pipeline().parameters.cfg).storageaccount.sas_url_kv_name",
									"type": "Expression"
								}
							}
						}
					},
					"compute": {
						"coreCount": 8,
						"computeType": "General"
					},
					"traceLevel": "Fine"
				}
			},
			{
				"name": "Lookup CSV Delimiter",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Find CSV Skip Count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"dataset": {
						"referenceName": "SourceBlobCSV_split",
						"type": "DatasetReference",
						"parameters": {
							"FileName": {
								"value": "@concat('delimiter_', pipeline().parameters.Filename)",
								"type": "Expression"
							},
							"KVSasUrl": {
								"value": "@json(pipeline().parameters.cfg).storageaccount.sas_url_kv_name",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Set Delimiter",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Lookup CSV Delimiter",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "delimiter",
					"value": {
						"value": "@split(activity('Lookup CSV Delimiter').output.firstRow.delimiter, ':')[1]",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Lookup CSV SkipLineCount",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set Delimiter",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"dataset": {
						"referenceName": "SourceBlobCSV_split",
						"type": "DatasetReference",
						"parameters": {
							"FileName": {
								"value": "@concat('headers_', pipeline().parameters.Filename)",
								"type": "Expression"
							},
							"KVSasUrl": {
								"value": "@json(pipeline().parameters.cfg).storageaccount.sas_url_kv_name",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Set SkipLineCount",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Lookup CSV SkipLineCount",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "SkipLineCount",
					"value": {
						"value": "@activity('Find CSV Skip Count').output.firstRow.column1",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Move File to Processed",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Update Log",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "BinarySource",
						"storeSettings": {
							"type": "AzureFileStorageReadSettings",
							"recursive": true,
							"wildcardFolderPath": "Import/InProcess",
							"wildcardFileName": {
								"value": "@pipeline().parameters.Filename",
								"type": "Expression"
							},
							"deleteFilesAfterCompletion": true
						},
						"formatSettings": {
							"type": "BinaryReadSettings"
						}
					},
					"sink": {
						"type": "BinarySink",
						"storeSettings": {
							"type": "AzureFileStorageWriteSettings",
							"copyBehavior": "PreserveHierarchy"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "DiffRG_FileMover",
						"type": "DatasetReference",
						"parameters": {
							"InOrOut": "InProcess",
							"StorageAccountName": {
								"value": "@json(pipeline().parameters.cfg).storageaccount.name",
								"type": "Expression"
							},
							"FileShare": {
								"value": "@json(pipeline().parameters.cfg).storageaccount.fileshare",
								"type": "Expression"
							},
							"KVStorageAccKey": {
								"value": "@json(pipeline().parameters.cfg).storageaccount.KVStorageAccKey",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DiffRG_FileMover",
						"type": "DatasetReference",
						"parameters": {
							"InOrOut": "Processed",
							"StorageAccountName": {
								"value": "@json(pipeline().parameters.cfg).storageaccount.name",
								"type": "Expression"
							},
							"FileShare": {
								"value": "@json(pipeline().parameters.cfg).storageaccount.fileshare",
								"type": "Expression"
							},
							"KVStorageAccKey": {
								"value": "@json(pipeline().parameters.cfg).storageaccount.KVStorageAccKey",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Create Initial Log",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Set SkipLineCount",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "DiffRG ETL Create Logs",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"local_file": {
							"value": "@concat('Import/',pipeline().parameters.DataWarehouseName,'/InProcess/', pipeline().parameters.Filename)",
							"type": "Expression"
						},
						"tenant_code": {
							"value": "@toLower(pipeline().parameters.DataWarehouseName)",
							"type": "Expression"
						},
						"slot": {
							"value": "@pipeline().parameters.Slot",
							"type": "Expression"
						},
						"datasource": {
							"value": "@split(pipeline().parameters.Filename, '_')[1]",
							"type": "Expression"
						},
						"dest_schema": "INGEST",
						"attr": "{}",
						"status": "Loading",
						"cfg": {
							"value": "@pipeline().parameters.cfg",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Copy data from Source to Ingest",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Create Initial Log",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureFileStorageReadSettings",
							"recursive": true,
							"wildcardFolderPath": "Import/InProcess",
							"wildcardFileName": {
								"value": "@pipeline().parameters.Filename",
								"type": "Expression"
							},
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings",
							"skipLineCount": {
								"value": "@variables('SkipLineCount')",
								"type": "Expression"
							}
						}
					},
					"sink": {
						"type": "SnowflakeSink",
						"importSettings": {
							"type": "SnowflakeImportCopyCommand"
						}
					},
					"enableStaging": true,
					"stagingSettings": {
						"linkedServiceName": {
							"referenceName": "ls_blob_dev_split_wlad",
							"type": "LinkedServiceReference",
							"parameters": {
								"KVSasUrl": {
									"value": "@json(pipeline().parameters.cfg).storageaccount.sas_url_kv_name",
									"type": "Expression"
								}
							}
						},
						"path": "stagingjson"
					}
				},
				"inputs": [
					{
						"referenceName": "Generic_SourceFileCSV",
						"type": "DatasetReference",
						"parameters": {
							"StorageAccountName": {
								"value": "@json(pipeline().parameters.cfg).storageaccount.name",
								"type": "Expression"
							},
							"FileShare": {
								"value": "@json(pipeline().parameters.cfg).storageaccount.fileshare",
								"type": "Expression"
							},
							"KVStorageAccKey": {
								"value": "@json(pipeline().parameters.cfg).storageaccount.KVStorageAccKey",
								"type": "Expression"
							},
							"FileName": {
								"value": "@pipeline().parameters.Filename",
								"type": "Expression"
							},
							"Delimiter": {
								"value": "@variables('delimiter')",
								"type": "Expression"
							},
							"SkipCount": {
								"value": "@variables('SkipLineCount')",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DiffRG_TargetTable",
						"type": "DatasetReference",
						"parameters": {
							"TableName": {
								"value": "@json(pipeline().parameters.cfg).datastore.tablename_csv_js",
								"type": "Expression"
							},
							"SchemaName": {
								"value": "@json(pipeline().parameters.cfg).datastore.schema",
								"type": "Expression"
							},
							"DatawarehouseName": {
								"value": "@json(pipeline().parameters.cfg).datastore.database",
								"type": "Expression"
							},
							"AccountName": {
								"value": "@json(pipeline().parameters.cfg).datastore.account",
								"type": "Expression"
							},
							"Username": {
								"value": "@json(pipeline().parameters.cfg).datastore.username",
								"type": "Expression"
							},
							"Database": {
								"value": "@json(pipeline().parameters.cfg).datastore.database",
								"type": "Expression"
							},
							"Warehouse": {
								"value": "@json(pipeline().parameters.cfg).datastore.warehouse",
								"type": "Expression"
							},
							"Password": {
								"value": "@json(pipeline().parameters.cfg).datastore.password_kv",
								"type": "Expression"
							},
							"Role": {
								"value": "@json(pipeline().parameters.cfg).datastore.role",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Update Log",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Copy data from Source to Ingest",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "DiffRG ETL Create Logs",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"local_file": {
							"value": "@concat('Import/',pipeline().parameters.DataWarehouseName,'/InProcess/', pipeline().parameters.Filename)",
							"type": "Expression"
						},
						"tenant_code": {
							"value": "@toLower(pipeline().parameters.DataWarehouseName)",
							"type": "Expression"
						},
						"slot": {
							"value": "@pipeline().parameters.Slot",
							"type": "Expression"
						},
						"datasource": "tesco",
						"uuid": {
							"value": "@activity('Create Initial Log').output.pipelineReturnValue.uuid",
							"type": "Expression"
						},
						"dest_table": {
							"value": "@if(startswith(pipeline().parameters.Filename, 'tactical'),json(pipeline().parameters.cfg).datastore.tablename_tactical , json(pipeline().parameters.cfg).datastore.tablename_reports )",
							"type": "Expression"
						},
						"dest_schema": "INGESTION",
						"attr": "{}",
						"status": "OK",
						"rows_read": {
							"value": "@activity('Copy data from Source to Ingest').output.rowsRead",
							"type": "Expression"
						},
						"rows_copied": {
							"value": "@activity('Copy data from Source to Ingest').output.rowsCopied",
							"type": "Expression"
						},
						"cfg": {
							"value": "@pipeline().parameters.cfg",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Update Log Fail",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Copy data from Source to Ingest",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "DiffRG ETL Create Logs",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"local_file": {
							"value": "@concat('Import/',pipeline().parameters.DataWarehouseName,'/InProcess/', pipeline().parameters.Filename)",
							"type": "Expression"
						},
						"tenant_code": {
							"value": "@toLower(pipeline().parameters.DataWarehouseName)",
							"type": "Expression"
						},
						"slot": {
							"value": "@pipeline().parameters.Slot",
							"type": "Expression"
						},
						"datasource": "tesco",
						"uuid": {
							"value": "@activity('Create Initial Log').output.pipelineReturnValue.uuid",
							"type": "Expression"
						},
						"dest_table": {
							"value": "@if(startswith(pipeline().parameters.Filename, 'tactical'),json(pipeline().parameters.cfg).datastore.tablename_tactical , json(pipeline().parameters.cfg).datastore.tablename_reports )",
							"type": "Expression"
						},
						"dest_schema": {
							"value": "@json(pipeline().parameters.cfg).datastore.schema",
							"type": "Expression"
						},
						"attr": "{}",
						"status": "FAILED",
						"rows_read": {
							"value": "@activity('Copy data from Source to Ingest').output.rowsRead",
							"type": "Expression"
						},
						"rows_copied": {
							"value": "@activity('Copy data from Source to Ingest').output.rowsCopied",
							"type": "Expression"
						},
						"cfg": {
							"value": "@pipeline().parameters.cfg",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Copy Fail",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "Update Log Fail",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": "567",
					"errorCode": "Failed to copy data from Source to Ingest"
				}
			},
			{
				"name": "Delete Delimiter File",
				"type": "Delete",
				"dependsOn": [
					{
						"activity": "Move File to Processed",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "SourceBlobCSV_split",
						"type": "DatasetReference",
						"parameters": {
							"FileName": {
								"value": "@concat('delimiter_', pipeline().parameters.Filename)",
								"type": "Expression"
							},
							"KVSasUrl": {
								"value": "@json(pipeline().parameters.cfg).storageaccount.sas_url_kv_name",
								"type": "Expression"
							}
						}
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					}
				}
			},
			{
				"name": "Delete SkipLineCount File",
				"type": "Delete",
				"dependsOn": [
					{
						"activity": "Delete Delimiter File",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "SourceBlobCSV_split",
						"type": "DatasetReference",
						"parameters": {
							"FileName": {
								"value": "@concat('headers_', pipeline().parameters.Filename)",
								"type": "Expression"
							},
							"KVSasUrl": {
								"value": "@json(pipeline().parameters.cfg).storageaccount.sas_url_kv_name",
								"type": "Expression"
							}
						}
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					}
				}
			}
		],
		"parameters": {
			"DataWarehouseName": {
				"type": "string",
				"defaultValue": "Edgewell"
			},
			"Filename": {
				"type": "string",
				"defaultValue": "tactical-edgewell"
			},
			"Slot": {
				"type": "string",
				"defaultValue": "dev"
			},
			"cfg": {
				"type": "string"
			}
		},
		"variables": {
			"JSON_Properties": {
				"type": "Array"
			},
			"JSON_Properties_String": {
				"type": "String"
			},
			"Number_of_JSON_Properties": {
				"type": "Integer"
			},
			"Current_Property": {
				"type": "Integer"
			},
			"Column_Mapping_String": {
				"type": "String"
			},
			"Column Mapping String Helper": {
				"type": "String"
			},
			"Current_Property_Helper": {
				"type": "Integer"
			},
			"Helper_String": {
				"type": "String"
			},
			"ReadyColumnMapping": {
				"type": "String"
			},
			"cfg": {
				"type": "String"
			},
			"delimiter": {
				"type": "String"
			},
			"SkipLineCount": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Auto CSV Processing"
		},
		"annotations": [],
		"lastPublishTime": "2024-01-16T17:14:02Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}