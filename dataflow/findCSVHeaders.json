{
	"name": "findCSVHeaders",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SourceBlobCSVNoDelimiter_split",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SourceBlobCSV_split",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     fileName as string",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 keyGenerate(output(rownum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(datalines = iif(startsWith(toString(byPosition(1)), '\"')\r",
				", iif(!isNull(toInteger(substring(toString(byPosition(1)),2,1))),toInteger(rownum),toInteger(0))\r",
				", (iif(!isNull(toInteger(left(toString(byPosition(1)),1))),toInteger(rownum),toInteger(0)))\r",
				")) ~> derivedColumn1",
				"derivedColumn1 aggregate(column1 = minIf(datalines!=0,datalines)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(toString(concat('headers_', $fileName)))],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}