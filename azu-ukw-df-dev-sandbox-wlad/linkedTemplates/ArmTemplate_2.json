{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "azu-ukw-df-dev-sandbox-wlad"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ETL Generic Load SFTP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceSFTPJSON",
								"type": "DatasetReference",
								"parameters": {
									"Username": {
										"value": "@pipeline().parameters.Username",
										"type": "Expression"
									},
									"DataWarehouseName": {
										"value": "@pipeline().parameters.DataWarehouseName",
										"type": "Expression"
									},
									"FilePath": "/outbound/processed"
								}
							},
							"fieldList": [
								"itemName",
								"childItems"
							],
							"storeSettings": {
								"type": "SftpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Filter Filename",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type,'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Filename').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy JSON from SFTP to Azure",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "SftpReadSettings",
												"recursive": true,
												"wildcardFolderPath": "/outbound/processed",
												"wildcardFileName": "tactical-bacardi-tesco-ond-shippers-2023-02102023-25122023-20231231210008.json",
												"enablePartitionDiscovery": false,
												"disableChunking": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureFileStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_dev_wlad",
												"type": "LinkedServiceReference"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SourceSFTPJSON",
											"type": "DatasetReference",
											"parameters": {
												"Username": {
													"value": "@pipeline().parameters.Username",
													"type": "Expression"
												},
												"DataWarehouseName": {
													"value": "@pipeline().parameters.DataWarehouseName",
													"type": "Expression"
												},
												"FilePath": "/outbound/processed"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TargetFileJSON",
											"type": "DatasetReference",
											"parameters": {
												"DatawareHouseName": {
													"value": "@pipeline().parameters.DataWarehouseName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "If File is Tactical",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Copy JSON from SFTP to Azure",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(item().name, 'tactical')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute Logic App",
												"type": "WebActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"method": "POST",
													"headers": {},
													"url": "https://prod-10.uksouth.logic.azure.com:443/workflows/78818aae79a34617bb270ea5419a9eb4/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=y1bLXuZtmJMmlJy2BDHiJqHYiCf0Jh5YE3oYTjWumcU",
													"body": {
														"value": "@concat('{\n    \"FileName\": \"', item().name, '\",\n    \"DataWarehouseName\": \"', pipeline().parameters.DataWarehouseName,'\"}')",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Username": {
						"type": "string",
						"defaultValue": "edgewell"
					},
					"DataWarehouseName": {
						"type": "string",
						"defaultValue": "Edgewell"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-22T15:21:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETL_UUID_TEST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "ETL_UUID",
										"value": {
											"value": "HardcodedETLUUID",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "Import/InProcess",
									"wildcardFileName": "tactical-edgewell-tesco-tactical-blitz-phase-1-2023-1112023-3112023-20231114160010.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"value": "@variables('columnmapping')",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "SourceFileJSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "columnmapping",
							"value": "{\n\t\"type\": \"TabularTranslator\",\n\t\"mappings\": [\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"id\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"ID\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"date\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"DATE\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"sku_id\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"SKU_ID\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"sku_description\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"SKU_DESCRIPTION\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"sku_code\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"SKU_CODE\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"sku_ean\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"SKU_EAN\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"client\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"CLIENT\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"sub_call\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"SUB_CALL\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"retailer\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"RETAILER\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"store_id\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"STORE_ID\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"store_description\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"STORE_DESCRIPTION\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"call_date\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"CALL_DATE\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"call_id\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"CALL_ID\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"question\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"QUESTION\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"response\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"RESPONSE\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"additional_info\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"ADDITIONAL_INFO\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"source\": {\n\t\t\t\t\"name\": \"ETL_UUID\"\n\t\t\t},\n\t\t\t\"target\": {\n\t\t\t\t\"name\": \"ETL_UUID\"\n\t\t\t}\n\t\t}\n\t]\n}"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"columnmapping": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Dev Leftovers"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-15T18:15:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DiffRG_FileMover')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_file_dev_split_wlad",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageAccountName": {
							"value": "@dataset().StorageAccountName",
							"type": "Expression"
						},
						"FileShare": {
							"value": "@dataset().FileShare",
							"type": "Expression"
						},
						"KVStorageAccKey": {
							"value": "@dataset().KVStorageAccKey",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"InOrOut": {
						"type": "string"
					},
					"StorageAccountName": {
						"type": "string"
					},
					"FileShare": {
						"type": "string"
					},
					"KVStorageAccKey": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Split into Different RG"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": {
							"value": "@concat('Import/',dataset().InOrOut, '/')",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DiffRG_SourceBlobJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_dev_split_wlad",
					"type": "LinkedServiceReference",
					"parameters": {
						"KVSasUrl": {
							"value": "@dataset().KVSasUrl",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"KVSasUrl": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Split into Different RG"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DiffRG_SourceFileJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_file_dev_split_wlad",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageAccountName": {
							"value": "@dataset().StorageAccountName",
							"type": "Expression"
						},
						"FileShare": {
							"value": "@dataset().FileShare",
							"type": "Expression"
						},
						"KVStorageAccKey": {
							"value": "@dataset().KVStorageAccKey",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"StorageAccountName": {
						"type": "string"
					},
					"FileShare": {
						"type": "string"
					},
					"KVStorageAccKey": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Split into Different RG"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DiffRG_SourceSFTPJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sftp_dev_split_wlad",
					"type": "LinkedServiceReference",
					"parameters": {
						"Hostname": {
							"value": "@dataset().Hostname",
							"type": "Expression"
						},
						"Username": {
							"value": "@dataset().Username",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Username": {
						"type": "string",
						"defaultValue": "clearboxretail"
					},
					"DataWarehouseName": {
						"type": "string",
						"defaultValue": "Baccardi"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "/outbound/processed"
					},
					"Hostname": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Split into Different RG"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"folderPath": {
							"value": "@dataset().FilePath",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DiffRG_TargetFileJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_file_dev_split_wlad",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageAccountName": {
							"value": "@dataset().StorageAccountName",
							"type": "Expression"
						},
						"FileShare": {
							"value": "@dataset().FileShare",
							"type": "Expression"
						},
						"KVStorageAccKey": {
							"value": "@dataset().KVStorageAccKey",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"DatawareHouseName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"StorageAccountName": {
						"type": "string"
					},
					"FileShare": {
						"type": "string"
					},
					"KVStorageAccKey": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Split into Different RG"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "Import/InProcess",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DiffRG_TargetTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sf_dev_split_wlad",
					"type": "LinkedServiceReference",
					"parameters": {
						"AccountName": {
							"value": "@dataset().AccountName",
							"type": "Expression"
						},
						"Username": {
							"value": "@dataset().Username",
							"type": "Expression"
						},
						"Database": {
							"value": "@dataset().Database",
							"type": "Expression"
						},
						"Warehouse": {
							"value": "@dataset().Warehouse",
							"type": "Expression"
						},
						"Password": {
							"value": "@dataset().Password",
							"type": "Expression"
						},
						"Role": {
							"value": "@dataset().Role",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"DatawarehouseName": {
						"type": "string",
						"defaultValue": "INTERNAL_DEV_WLAD"
					},
					"AccountName": {
						"type": "string"
					},
					"Username": {
						"type": "string"
					},
					"Database": {
						"type": "string"
					},
					"Warehouse": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					},
					"Role": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Split into Different RG"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Generic_SourceFileCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_file_dev_split_wlad",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageAccountName": {
							"value": "@dataset().StorageAccountName",
							"type": "Expression"
						},
						"FileShare": {
							"value": "@dataset().FileShare",
							"type": "Expression"
						},
						"KVStorageAccKey": {
							"value": "@dataset().KVStorageAccKey",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"StorageAccountName": {
						"type": "string",
						"defaultValue": "azuukwstdevsandboxwlad"
					},
					"FileShare": {
						"type": "string",
						"defaultValue": "stfs-sandbox-dev-wlad"
					},
					"KVStorageAccKey": {
						"type": "string",
						"defaultValue": "sa-access-key-edgewell"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "dummy.csv"
					},
					"Delimiter": {
						"type": "string"
					},
					"SkipCount": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Auto CSV Processing"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "Import/InProcess"
					},
					"columnDelimiter": {
						"value": "@dataset().Delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceBlobCSVNoDelimiter_split')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_dev_split_wlad",
					"type": "LinkedServiceReference",
					"parameters": {
						"KVSasUrl": {
							"value": "@dataset().KVSasUrl",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "Heinz Select App Data Sample.csv"
					},
					"KVSasUrl": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Auto CSV Processing"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "staging"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceBlobCSV_split')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_dev_split_wlad",
					"type": "LinkedServiceReference",
					"parameters": {
						"KVSasUrl": {
							"value": "@dataset().KVSasUrl",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "Heinz Select App Data Sample.csv"
					},
					"KVSasUrl": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Auto CSV Processing"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "staing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceFileCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_file_dev_split_wlad",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageAccountName": {
							"value": "@dataset().StorageAccountName",
							"type": "Expression"
						},
						"FileShare": {
							"value": "@dataset().FileShare",
							"type": "Expression"
						},
						"KVStorageAccKey": {
							"value": "@dataset().KVStorageAccKey",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"StorageAccountName": {
						"type": "string",
						"defaultValue": "azuukwstdevsandboxwlad"
					},
					"FileShare": {
						"type": "string",
						"defaultValue": "stfs-sandbox-dev-wlad"
					},
					"KVStorageAccKey": {
						"type": "string",
						"defaultValue": "sa-access-key-edgewell"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "dummy.csv"
					}
				},
				"folder": {
					"name": "Auto CSV Processing"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "Import/InProcess"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceFileCSVNoDelimiter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_file_dev_split_wlad",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageAccountName": {
							"value": "@dataset().StorageAccountName",
							"type": "Expression"
						},
						"FileShare": {
							"value": "@dataset().FileShare",
							"type": "Expression"
						},
						"KVStorageAccKey": {
							"value": "@dataset().StorageAccountName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"StorageAccountName": {
						"type": "string",
						"defaultValue": "azuukwstdevsandboxwlad"
					},
					"FileShare": {
						"type": "string",
						"defaultValue": "stfs-sandbox-dev-wlad"
					},
					"KVStorageAccKey": {
						"type": "string",
						"defaultValue": "sa-access-key-edgewell"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "dummy.csv"
					}
				},
				"folder": {
					"name": "Auto CSV Processing"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "Import/InProcess"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/delimparam')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "AutoCSVDebug"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dynadelim",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "folderout",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['delimfinal.txt'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/findDelimiter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "AutoCSVDebug"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesD2_fixed",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "delimiterout",
								"type": "DatasetReference"
							},
							"name": "outputdelim"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "JustHeader"
						},
						{
							"name": "NameSingleCol",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "NumberEachRow"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source\nJustHeader derive(delimiter = 'Delimiter:,'+toString(regexExtract({_col0_},'([!$`~%^,|\\t])',1))) ~> DerivedColumn1\nNumberEachRow filter(rownum == 1) ~> JustHeader\nsource derive({_col0_} = toString(byName('_col0_'))) ~> NameSingleCol\nNameSingleCol keyGenerate(output(rownum as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> NumberEachRow\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['delimiter.txt'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tquoteAll: true,\n\tmapColumn(\n\t\tdelimiter\n\t),\n\tpartitionBy('hash', 1)) ~> outputdelim"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/API Management KH Test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceBlobCSV",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "Heinz Select API Outlets List 20240202_pipesall.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DiffRG_TargetFileJSON",
								"type": "DatasetReference",
								"parameters": {
									"DatawareHouseName": "test",
									"FileName": "outputFull.json",
									"StorageAccountName": "azuukssadevedgewellwlad",
									"FileShare": "stfs-sandbox-dev-wlad",
									"KVStorageAccKey": "sa-access-key-edgewell-new"
								}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "CosmosDbSqlApiSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DiffRG_TargetFileJSON",
								"type": "DatasetReference",
								"parameters": {
									"DatawareHouseName": "test",
									"FileName": "outputFull.json",
									"StorageAccountName": "azuukssadevedgewellwlad",
									"FileShare": "stfs-sandbox-dev-wlad",
									"KVStorageAccKey": "sa-access-key-edgewell-new"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "KraftHeinzAPI_CSDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dev Leftovers"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-05T15:42:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DiffRG_TargetFileJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DiffRG ETL Generic Generate Column Mapping Two Step')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Failed To Connect",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Lookup JSON",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Failed to connect to Storage Account",
							"errorCode": "555"
						}
					},
					{
						"name": "Lookup JSON",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "Import/InProcess",
									"wildcardFileName": {
										"value": "@pipeline().parameters.FilenamePattern",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DiffRG_SourceFileJSON",
								"type": "DatasetReference",
								"parameters": {
									"StorageAccountName": {
										"value": "@pipeline().parameters.StorageAccountName",
										"type": "Expression"
									},
									"FileShare": {
										"value": "@pipeline().parameters.FileShare",
										"type": "Expression"
									},
									"KVStorageAccKey": {
										"value": "@pipeline().parameters.KVStorageAccKey",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "If File Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup JSON",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(contains(activity('Lookup JSON').output, 'firstRow'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "File Not Found",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "File Not Found",
										"errorCode": "554"
									}
								}
							]
						}
					},
					{
						"name": "Convert JSON_Properties String to Array",
						"description": "Contains an array of properties in JSON returned by the previous step",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Clean Up JSON Properties String",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "JSON_Properties",
							"value": {
								"value": "@split(variables('Helper_String'), '^')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set Column Mapping String",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('Current_Property'), sub(variables('Number_of_JSON_Properties'), 1))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append Column Mapping String",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Column Mapping String Helper",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Column_Mapping_String",
										"value": {
											"value": "@variables('Column Mapping String Helper')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Column Mapping String Helper",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Column Mapping String Helper",
										"value": {
											"value": "@concat(variables('Column_Mapping_String'),'{\"source\": {\"name\": \"', variables('JSON_Properties')[variables('Current_Property')], '\"},\"target\":{\"name\":\"', replace(replace(replace(replace(variables('JSON_Properties')[variables('Current_Property')], ' ', '_'), '.', ''), '!', ''), '?', ''), '\"}},')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Current Property Helper",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Append Column Mapping String",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Current_Property_Helper",
										"value": {
											"value": "@add(variables('Current_Property'),2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Current Property",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Current Property Helper",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Current_Property",
										"value": {
											"value": "@variables('Current_Property_Helper')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Set Number of JSON Properties",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Convert JSON_Properties String to Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Number_of_JSON_Properties",
							"value": {
								"value": "@length(variables('JSON_Properties'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Current_Property",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Convert JSON_Properties String to Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Current_Property",
							"value": 0
						}
					},
					{
						"name": "Set Column Mapping String",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Current_Property",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Number of JSON Properties",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Column_Mapping_String",
							"value": "{\n  \"type\": \"TabularTranslator\",\n  \"mappings\": ["
						}
					},
					{
						"name": "Clean Up Column Mapping String",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Column Mapping String Helper",
							"value": {
								"value": "@substring(variables('Column_Mapping_String'), 0, sub(length(variables('Column_Mapping_String')), 1))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Finalize Column Mapping String",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Clean Up Column Mapping String",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "ColumnMappingString",
									"value": {
										"type": "Expression",
										"content": "@concat(variables('Column Mapping String Helper'), ']}')"
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "Set JSON Properties String",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If File Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "JSON_Properties_String",
							"value": {
								"value": "@string(activity('Lookup JSON').output.firstRow)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Clean Up JSON Properties String",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set JSON Properties String",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Helper_String",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(replace(replace(replace(variables('JSON_Properties_String'), ',\"', '^'),'/', ''), '\":', '^'), '\"', ''), ' ,', '---'), ',', ','), '---', ' ,'), '{', ''), '}', '')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"DataWarehouseName": {
						"type": "string",
						"defaultValue": "Edgewell"
					},
					"FilenamePattern": {
						"type": "string",
						"defaultValue": "tactical-edgewell"
					},
					"StorageAccountName": {
						"type": "string"
					},
					"FileShare": {
						"type": "string"
					},
					"KVStorageAccKey": {
						"type": "string"
					}
				},
				"variables": {
					"JSON_Properties": {
						"type": "Array"
					},
					"JSON_Properties_String": {
						"type": "String"
					},
					"Number_of_JSON_Properties": {
						"type": "Integer"
					},
					"Current_Property": {
						"type": "Integer"
					},
					"Column_Mapping_String": {
						"type": "String"
					},
					"Column Mapping String Helper": {
						"type": "String"
					},
					"Current_Property_Helper": {
						"type": "Integer"
					},
					"Helper_String": {
						"type": "String"
					},
					"ReadyColumnMapping": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Split Into Different RGs"
				},
				"annotations": [],
				"lastPublishTime": "2024-01-22T18:37:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DiffRG_SourceFileJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DiffRG ETL Generic Load SFTP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set Variable Cfg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DiffRG_SourceSFTPJSON",
								"type": "DatasetReference",
								"parameters": {
									"Username": {
										"value": "@json(variables('cfg_sftp')).integration.expd8.username",
										"type": "Expression"
									},
									"DataWarehouseName": {
										"value": "@pipeline().parameters.DataWarehouseName",
										"type": "Expression"
									},
									"FilePath": "/outbound/processed",
									"Hostname": {
										"value": "@json(variables('cfg_sftp')).integration.expd8.hostname",
										"type": "Expression"
									},
									"SecretName": {
										"value": "@json(variables('cfg_sftp')).integration.expd8.secret_name",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"itemName",
								"childItems"
							],
							"storeSettings": {
								"type": "SftpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Filter Filename",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type,'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Filename').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy JSON from SFTP to Azure",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "SftpReadSettings",
												"recursive": true,
												"wildcardFolderPath": "/outbound/processed",
												"wildcardFileName": "tactical-bacardi-tesco-ond-shippers-2023-02102023-25122023-20231231210008.json",
												"enablePartitionDiscovery": false,
												"disableChunking": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureFileStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_dev_wlad",
												"type": "LinkedServiceReference"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DiffRG_SourceSFTPJSON",
											"type": "DatasetReference",
											"parameters": {
												"Username": {
													"value": "@json(variables('cfg_sftp')).integration.expd8.username",
													"type": "Expression"
												},
												"DataWarehouseName": {
													"value": "@pipeline().parameters.DataWarehouseName",
													"type": "Expression"
												},
												"FilePath": "/outbound/processed",
												"Hostname": {
													"value": "@json(variables('cfg_sftp')).integration.expd8.hostname",
													"type": "Expression"
												},
												"SecretName": {
													"value": "@json(variables('cfg_sftp')).integration.expd8.secret_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DiffRG_TargetFileJSON",
											"type": "DatasetReference",
											"parameters": {
												"DatawareHouseName": {
													"value": "@pipeline().parameters.DataWarehouseName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"StorageAccountName": {
													"value": "@json(variables('cfg_sftp')).storageaccount.name",
													"type": "Expression"
												},
												"FileShare": {
													"value": "@json(variables('cfg_sftp')).storageaccount.fileshare",
													"type": "Expression"
												},
												"KVStorageAccKey": {
													"value": "@json(variables('cfg_sftp')).storageaccount.KVStorageAccKey",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "If File is Tactical",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Copy JSON from SFTP to Azure",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(item().name, 'tactical')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute Logic App",
												"type": "WebActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"method": "POST",
													"headers": {},
													"url": "https://prod-10.uksouth.logic.azure.com:443/workflows/78818aae79a34617bb270ea5419a9eb4/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=y1bLXuZtmJMmlJy2BDHiJqHYiCf0Jh5YE3oYTjWumcU",
													"body": {
														"value": "@concat('{\n    \"FileName\": \"', item().name, '\",\n    \"DataWarehouseName\": \"', pipeline().parameters.DataWarehouseName,'\"}')",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Set Variable Cfg",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Cfg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "cfg_sftp",
							"value": {
								"value": "@activity('Get Cfg').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Cfg",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://az-ukw-ac-dev-wlad.azconfig.io/kv/', pipeline().parameters.DataWarehouseName, '_', pipeline().parameters.Slot)",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://az-ukw-ac-dev-wlad.azconfig.io"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Username": {
						"type": "string",
						"defaultValue": "edgewell"
					},
					"DataWarehouseName": {
						"type": "string",
						"defaultValue": "Edgewell"
					},
					"Slot": {
						"type": "string",
						"defaultValue": "dev"
					}
				},
				"variables": {
					"cfg_sftp": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Split Into Different RGs"
				},
				"annotations": [],
				"lastPublishTime": "2024-01-23T19:27:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DiffRG_SourceSFTPJSON')]",
				"[concat(variables('factoryId'), '/datasets/DiffRG_TargetFileJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETL Generic Copy JSON')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move File to Processed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Switch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat('Import/',pipeline().parameters.DataWarehouseName,'/InProcess/')",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "@pipeline().parameters.Filename",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FileMover",
								"type": "DatasetReference",
								"parameters": {
									"DataWarehouseName": {
										"value": "@pipeline().parameters.DataWarehouseName",
										"type": "Expression"
									},
									"InOrOut": "InProcess"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FileMover",
								"type": "DatasetReference",
								"parameters": {
									"DataWarehouseName": {
										"value": "@pipeline().parameters.DataWarehouseName",
										"type": "Expression"
									},
									"InOrOut": "Processed"
								}
							}
						]
					},
					{
						"name": "Switch",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Create Initial Log",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.DataWarehouseName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Edgewell",
									"activities": [
										{
											"name": "Copy data from Source to Ingest",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "JsonSource",
													"storeSettings": {
														"type": "AzureFileStorageReadSettings",
														"recursive": true,
														"wildcardFolderPath": {
															"value": "@concat('Import/',pipeline().parameters.DataWarehouseName,'/InProcess/')",
															"type": "Expression"
														},
														"wildcardFileName": {
															"value": "@pipeline().parameters.Filename",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "JsonReadSettings"
													}
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_dev_wlad",
														"type": "LinkedServiceReference"
													},
													"path": "stagingjson"
												},
												"translator": {
													"value": "@activity('Execute Pipeline Generate Column Mapping').output.pipelineReturnValue.ColumnMappingString",
													"type": "Expression"
												}
											},
											"inputs": [
												{
													"referenceName": "SourceFileJSON",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "TargetTable",
													"type": "DatasetReference",
													"parameters": {
														"TableName": {
															"value": "@if(startswith(pipeline().parameters.Filename, 'tactical'),'RAW_TACTICAL_EDGEWELL' , 'RAW_EDGEWELL_REPORTS' )",
															"type": "Expression"
														},
														"SchemaName": "INGEST",
														"DatawarehouseName": "INTERNAL_DEV_WLAD"
													}
												}
											]
										},
										{
											"name": "Update Log",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data from Source to Ingest",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ETL Create Logs",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"local_file": {
														"value": "@concat('Import/',pipeline().parameters.DataWarehouseName,'/InProcess/', pipeline().parameters.Filename)",
														"type": "Expression"
													},
													"tenant_code": {
														"value": "@toLower(pipeline().parameters.DataWarehouseName)",
														"type": "Expression"
													},
													"slot": {
														"value": "@pipeline().parameters.Slot",
														"type": "Expression"
													},
													"datasource": "tesco",
													"uuid": {
														"value": "@activity('Create Initial Log').output.pipelineReturnValue.uuid",
														"type": "Expression"
													},
													"dest_table": "RAW_TACTICAL_EDGEWELL",
													"dest_schema": "INGEST",
													"attr": "{}",
													"status": {
														"value": "@activity('Copy data from Source to Ingest').output.executionDetails[0].status",
														"type": "Expression"
													},
													"rows_read": {
														"value": "@activity('Copy data from Source to Ingest').output.rowsRead",
														"type": "Expression"
													},
													"rows_copied": {
														"value": "@activity('Copy data from Source to Ingest').output.rowsCopied",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Update Log Fail",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Copy data from Source to Ingest",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ETL Create Logs",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"local_file": {
														"value": "@concat('Import/',pipeline().parameters.DataWarehouseName,'/InProcess/', pipeline().parameters.Filename)",
														"type": "Expression"
													},
													"tenant_code": {
														"value": "@toLower(pipeline().parameters.DataWarehouseName)",
														"type": "Expression"
													},
													"slot": {
														"value": "@pipeline().parameters.Slot",
														"type": "Expression"
													},
													"datasource": "tesco",
													"uuid": {
														"value": "@activity('Create Initial Log').output.pipelineReturnValue.uuid",
														"type": "Expression"
													},
													"dest_table": "RAW_TACTICAL_EDGEWELL",
													"dest_schema": "INGEST",
													"attr": "{}",
													"status": {
														"value": "@activity('Copy data from Source to Ingest').output.executionDetails[0].status",
														"type": "Expression"
													},
													"rows_read": {
														"value": "@activity('Copy data from Source to Ingest').output.rowsRead",
														"type": "Expression"
													},
													"rows_copied": {
														"value": "@activity('Copy data from Source to Ingest').output.rowsCopied",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Copy Fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "Update Log Fail",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": "567",
												"errorCode": "Failed to copy data from Source to Ingest"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Fail",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Generate Column Mapping",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Failed to connect to Storage Account or File Does Not Exist",
							"errorCode": "556"
						}
					},
					{
						"name": "Create Initial Log",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Generate Column Mapping",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ETL Create Logs",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"local_file": {
									"value": "@concat('Import/',pipeline().parameters.DataWarehouseName,'/InProcess/', pipeline().parameters.Filename)",
									"type": "Expression"
								},
								"tenant_code": {
									"value": "@toLower(pipeline().parameters.DataWarehouseName)",
									"type": "Expression"
								},
								"slot": {
									"value": "@pipeline().parameters.Slot",
									"type": "Expression"
								},
								"datasource": "tesco",
								"dest_schema": "INGEST",
								"attr": "{}",
								"status": "Loading"
							}
						}
					},
					{
						"name": "Execute Pipeline Generate Column Mapping",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ETL Generic Generate Column Mapping Two Step",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataWarehouseName": {
									"value": "@pipeline().parameters.DataWarehouseName",
									"type": "Expression"
								},
								"FilenamePattern": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"DataWarehouseName": {
						"type": "string",
						"defaultValue": "Edgewell"
					},
					"Filename": {
						"type": "string",
						"defaultValue": "tactical-edgewell"
					},
					"Slot": {
						"type": "string",
						"defaultValue": "dev"
					}
				},
				"variables": {
					"JSON_Properties": {
						"type": "Array"
					},
					"JSON_Properties_String": {
						"type": "String"
					},
					"Number_of_JSON_Properties": {
						"type": "Integer"
					},
					"Current_Property": {
						"type": "Integer"
					},
					"Column_Mapping_String": {
						"type": "String"
					},
					"Column Mapping String Helper": {
						"type": "String"
					},
					"Current_Property_Helper": {
						"type": "Integer"
					},
					"Helper_String": {
						"type": "String"
					},
					"ReadyColumnMapping": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-16T17:14:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETL Generic Extract JSON Blob Without Logs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move File to Processed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Filter Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat('Import/',pipeline().parameters.DataWarehouseName,'/InProcess/')",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "@activity('Filter Filename').output.value[0].name",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureFileStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FileMover",
								"type": "DatasetReference",
								"parameters": {
									"DataWarehouseName": {
										"value": "@pipeline().parameters.DataWarehouseName",
										"type": "Expression"
									},
									"InOrOut": "InProcess"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FileMover",
								"type": "DatasetReference",
								"parameters": {
									"DataWarehouseName": {
										"value": "@pipeline().parameters.DataWarehouseName",
										"type": "Expression"
									},
									"InOrOut": "Processed"
								}
							}
						]
					},
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"state": "Inactive",
						"onInactiveMarkAs": "Skipped",
						"dependsOn": [
							{
								"activity": "Switch",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FileMover",
								"type": "DatasetReference",
								"parameters": {
									"DataWarehouseName": "Edgewell",
									"InOrOut": "InProcess"
								}
							},
							"fieldList": [
								"itemName",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureFileStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter Filename",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type,'File'),startswith(item().name, pipeline().parameters.FilenamePattern))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Switch",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Generate Column Mapping",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.DataWarehouseName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Edgewell",
									"activities": [
										{
											"name": "Copy data from Source to Ingest",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "JsonSource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@concat(pipeline().parameters.FilenamePattern, '*.json')",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "JsonReadSettings"
													}
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_dev_wlad",
														"type": "LinkedServiceReference"
													},
													"path": "stagingjson"
												},
												"translator": {
													"value": "@activity('Execute Pipeline Generate Column Mapping').output.pipelineReturnValue.ColumnMappingString",
													"type": "Expression"
												}
											},
											"inputs": [
												{
													"referenceName": "SourceBlobJSON",
													"type": "DatasetReference",
													"parameters": {
														"ContainerName": {
															"value": "@toLower(pipeline().parameters.DataWarehouseName)",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "TargetTable",
													"type": "DatasetReference",
													"parameters": {
														"TableName": "RAW_TACTICAL_EDGEWELL",
														"SchemaName": "INGEST"
													}
												}
											]
										}
									]
								}
							]
						}
					},
					{
						"name": "Execute Pipeline Generate Column Mapping",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ETL Generic Generate Column Mapping Blob",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataWarehouseName": {
									"value": "@pipeline().parameters.DataWarehouseName",
									"type": "Expression"
								},
								"FilenamePattern": {
									"value": "@pipeline().parameters.FilenamePattern",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Fail",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Generate Column Mapping",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Failed to connect to Storage Account or File Does Not Exist",
							"errorCode": "556"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"DataWarehouseName": {
						"type": "string",
						"defaultValue": "Edgewell"
					},
					"FilenamePattern": {
						"type": "string",
						"defaultValue": "tactical-edgewell"
					}
				},
				"variables": {
					"JSON_Properties": {
						"type": "Array"
					},
					"JSON_Properties_String": {
						"type": "String"
					},
					"Number_of_JSON_Properties": {
						"type": "Integer"
					},
					"Current_Property": {
						"type": "Integer"
					},
					"Column_Mapping_String": {
						"type": "String"
					},
					"Column Mapping String Helper": {
						"type": "String"
					},
					"Current_Property_Helper": {
						"type": "Integer"
					},
					"Helper_String": {
						"type": "String"
					},
					"ReadyColumnMapping": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Dev Leftovers"
				},
				"annotations": [],
				"lastPublishTime": "2024-01-16T17:14:02Z"
			},
			"dependsOn": []
		}
	]
}